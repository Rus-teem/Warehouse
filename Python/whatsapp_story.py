import os
import argparse
import requests
import tempfile
import sys

# –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
# - argparse: –¥–ª—è —á—Ç–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
# - requests: –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ URL
# - tempfile: –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
# - sys: –¥–ª—è –≤—ã—Ö–æ–¥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
# - selenium –∏ –º–æ–¥—É–ª–∏ –∏–∑ –Ω–µ—ë: –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
# - webdriver_manager: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ ChromeDriver
# - time: –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
# - traceback: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫

parser = argparse.ArgumentParser(description="Publish WhatsApp story via WhatsApp Web")
parser.add_argument("image", nargs="?", help="Path to the image to publish")
parser.add_argument("--user-data-dir", default="./User_Data", help="Chrome user data directory")
parser.add_argument("--image-url", required=False, help="URL of the image to download and publish")
parser.add_argument("--use-wassenger", action="store_true", help="Use Wassenger API to publish status instead of Selenium")
parser.add_argument("--wa-token", help="Wassenger API token")
parser.add_argument("--wa-device-id", help="Wassenger device ID")
args = parser.parse_args()

# Determine source of the image: URL or positional argument
if args.image_url:
    try:
        response = requests.get(args.image_url)
        response.raise_for_status()
        suffix = os.path.splitext(args.image_url)[1] or ".jpg"
        tmpfile = tempfile.NamedTemporaryFile(delete=False, suffix=suffix)
        tmpfile.write(response.content)
        tmpfile.close()
        IMAGE_PATH = tmpfile.name
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {IMAGE_PATH}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        sys.exit(1)
elif args.image:
    IMAGE_PATH = args.image
else:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    IMAGE_PATH = "/Users/rustem/Pictures/–û–±–æ–∏/photo-1542273917363-3b1817f69a2d.jpeg"
    print(f"‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {IMAGE_PATH}")

USER_DATA_DIR = args.user_data_dir

import traceback
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import time

# –õ–æ–≥–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ DOM —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ñ–∞–π–ª automation_combined_log.txt
def log_browser_action(driver, message):
    from datetime import datetime
    print(message)
    with open("automation_combined_log.txt", "a", encoding="utf-8") as log_file:
        log_file.write(f"[{datetime.now().isoformat()}] {message}\n")
        log_file.write(driver.execute_script("return document.documentElement.outerHTML") + "\n\n")

def publish_story():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ü–∏–π Chrome –∏ –∑–∞–ø—É—Å–∫ –¥—Ä–∞–π–≤–µ—Ä–∞
    options = webdriver.ChromeOptions()
    options.add_argument(f"--user-data-dir={USER_DATA_DIR}")
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ WhatsApp Web
        log_browser_action(driver, "üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º WhatsApp Web...")
        driver.get("https://web.whatsapp.com/")
        log_browser_action(driver, "üîê –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ –±—Ä–∞—É–∑–µ—Ä–∞...")
        # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        WebDriverWait(driver, 60).until(EC.presence_of_element_located((By.CSS_SELECTOR, "body")))
        
        wait = WebDriverWait(driver, 60)
        log_browser_action(driver, "üß™ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...")
        # –®–∞–≥ 1: –ö–ª–∏–∫ –ø–æ –∏–∫–æ–Ω–∫–µ —Å—Ç–∞—Ç—É—Å–∞
        status_icon = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "span[data-icon='status-refreshed']")))
        status_button = status_icon.find_element(By.XPATH, './ancestor::button')
        # –°–∫—Ä–æ–ª–ª–∏–º –∫ –∫–Ω–æ–ø–∫–µ –∏ –ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å, —Å —Ñ–æ–ª–±–µ–∫–æ–º —á–µ—Ä–µ–∑ JS
        driver.execute_script("arguments[0].scrollIntoView({block:'center'});", status_button)
        try:
            status_button.click()
        except Exception:
            log_browser_action(driver, "‚ö†Ô∏è –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º JS")
            driver.execute_script("arguments[0].click();", status_button)
        log_browser_action(driver, "üëâ –ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç—É—Å–∞")
        time.sleep(2)

        # –®–∞–≥ 2: –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
        add_status_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@aria-label='Add Status' or contains(@title, '—Å—Ç–∞—Ç—É—Å')]")))
        add_status_button.click()
        log_browser_action(driver, "üëâ –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ '–¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å'")
        time.sleep(1)

        # –®–∞–≥ 3: –ö–ª–∏–∫ –ø–æ –ø—É–Ω–∫—Ç—É "–§–æ—Ç–æ"
        media_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//li[@role='button']//span[contains(text(), '–§–æ—Ç–æ') or contains(text(), 'Photo')]")))
        media_button.click()
        log_browser_action(driver, "üëâ –ö–ª–∏–∫–∞–µ–º –ø–æ –ø—É–Ω–∫—Ç—É '–§–æ—Ç–æ'")
        time.sleep(1)

        # –®–∞–≥ 4: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ input[type='file']
        file_path = os.path.abspath(IMAGE_PATH)
        if not os.path.isfile(file_path):
            log_browser_action(driver, f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {file_path}")
            return
        file_input = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "input[type='file']")))
        file_input.send_keys(file_path)
        log_browser_action(driver, "üì§ –§–∞–π–ª –ø–µ—Ä–µ–¥–∞–Ω —á–µ—Ä–µ–∑ send_keys –±–µ–∑ –≤—ã–∑–æ–≤–∞ Finder")
        time.sleep(2)

        # –®–∞–≥ 5: –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –∫–ª–∏–∫ –ø–æ –Ω–µ–π
        log_browser_action(driver, "‚è≥ –ñ–¥—ë–º, –∫–æ–≥–¥–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π...")
        send_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//div[@role='button' and @aria-label='–û—Ç–ø—Ä–∞–≤–∏—Ç—å']")))
        send_button.click()
        log_browser_action(driver, "‚úÖ –°—Ç–æ—Ä–∏–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    except Exception as e:
        log_browser_action(driver, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        log_browser_action(driver, "üõë –§–∏–Ω–∞–ª—å–Ω—ã–π DOM –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ (–ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –≤ automation_combined_log.txt)")
    finally:
        time.sleep(3)
        driver.quit()
        print("üëã –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç.")

if __name__ == "__main__":
    publish_story()